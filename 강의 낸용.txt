typescript : 타입 정의만 얹어놓은거.

자바스크립트로 컴파일되는언어 (트랜스파일되는거)

npm install -save-dev typescript

코드 맨위에 // @ts-check 넣어주면된다.

//node정보에대한 type들이 정의되어있다.
npm install --save-dev @types/node


typescript를 사용하기위해 
jsconfig.json 파일을 만들고

{
    "compilerOptions": {
        "strict":true //엄격하게 검사해라(복붙할때 주석지워야됨)
    },
    "include": [
        "src/**/*"
    ]
}
추가해준다.


자바스크립트와 Event Loop 

이해가 필요한이유 : 노드에서 복잡한 고급기능을 이해없이 사용하기쉽고 효과적인 코드를 잘잡기어려워서이다.
자바스크립트의 동시성모델을 잘이해해야된다.
실행모델 : event Loop, call stack, callback queue

event Loop : 여러스레드 사용
call stack : 지금시점까지 불린 함수들의 스택  ( 스택은 아래에서 위로 차곡차곡쌓였다가 위에서부터 하나씩 빼내는것)
 ㄴ 빈상태 -> callback(처리중) -> 빈상태 -> callback(처리중) 
 앞에있는 처리가 끝나야 다음처리가능  (완전 빌때까지 처리해야됨)

callback queue(메시지 큐): 앞으로 실행할 콜백들을 쌓아두는 큐 
(브라우저나 node가 어떤일이 발생하면 메인스레드에게 알려주기위해 사용)
ex ) 파일처리완료, 네트워크작업완료, 타이머 호출

-----------------------------------------
I Hoisting -var
 console.log(x)
 var x =1
이건 var는 위로 올라가서 선언은됬지만 값은 나오지않는다. undefined

var x 
console.log(x)
x=1 
이거랑 동일하다

hoisting : 변수선언만을 해당스코프 맨위로 끌어올리는것
function도 hoisting 대상이다. (함수선언과 값의 초기화는 서로다르다)

자바스크립트에서 binding 은 lexical scope이다
lexical scope 란 안쪽에서 바깥쪽 변수에 접근할수있다

----------------------------------------------
closure = function + environment
ㄴ  fucntion이 하나 생길때마다 하나씩 생깁니다.
ㄴ  environment 모든 스코프
ex) 
function and(x){
    return function print(y){
        return x + "and" + y
    }
}

const saltAnd = and('salt')
console.log(saltAnd('pepper'))
console.log(saltAnd('sugar'))
// 서로 다른 Closure을 만듦 (함수는 같지만 환경은 서로다르다)
const waterAnd = and('water')
console.log(waterAnd('juice'))
Saltand의 closure -> 함수 : print , 환경 : x -> salt